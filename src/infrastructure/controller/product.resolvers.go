package controller

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"product-service-graphql/src/infrastructure/models"
	"product-service-graphql/src/shared/tracing"
	"product-service-graphql/src/usecase/products"

	"github.com/mitchellh/mapstructure"
	opentracing "github.com/opentracing/opentracing-go"
)

// CreateProduct is the resolver for the CreateProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, request models.ProductRequest) (*models.ProductResponse, error) {
	sp, ctx := opentracing.StartSpanFromContext(ctx, "CreateProduct")
	defer sp.Finish()

	reqData := products.ProductRequest{
		NamaProduct:  request.NamaProduct,
		JenisProduct: request.JenisProduct,
		HargaProduct: request.HargaProduct,
	}

	res, err := r.Product.CreateProduct(ctx, reqData)
	if err != nil {
		tracing.LogError(sp, err)
		return nil, err
	}

	var out *models.ProductResponse
	err = mapstructure.Decode(res, &out)
	if err != nil {
		tracing.LogError(sp, err)
		return nil, err
	}

	tracing.LogResponse(sp, res)
	return out, nil
}

// GetProductByID is the resolver for the GetProductById field.
func (r *queryResolver) GetProductByID(ctx context.Context, id string) (*models.ProductResponse, error) {
	panic(fmt.Errorf("not implemented: GetProductByID - GetProductById"))
}
